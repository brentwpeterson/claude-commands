# Claude Code Workspace Configuration Template
# Copy this file to workspace.env and customize for your workspace

# Workspace identification
WORKSPACE_NAME="My Development Workspace"
WORKSPACE_ROOT_PATH="$PWD"

# Git configuration
DEFAULT_MAIN_BRANCH="main"  # or "master" depending on your preference
GIT_USER_EMAIL="your.email@example.com"
GIT_USER_NAME="Your Name"

# Project discovery patterns
# Comma-separated list of directory patterns to include as projects
PROJECT_INCLUDE_PATTERNS="*"  # Include all directories
# PROJECT_INCLUDE_PATTERNS="app-*,service-*,lib-*"  # Only directories matching these patterns

# Comma-separated list of directory patterns to exclude from project discovery
PROJECT_EXCLUDE_PATTERNS=".git,.github,.vscode,.idea,node_modules,dist,build"

# Documentation structure preferences
DOCS_PATH="documentation/docs/technical/git"  # Where to create git documentation
CREATE_DOCS_STRUCTURE="true"  # Set to "false" to skip auto-creating docs

# Branch audit configuration
BRANCH_CATEGORIES="feature,enhancement,fix,bug,hotfix,security,performance,refactor,docs,test,chore"
STALE_BRANCH_DAYS="30"  # Consider branches stale after X days of inactivity
AUTO_UPDATE_BRANCHES="false"  # Set to "true" to auto-update branches without asking

# Context file management
CONTEXT_CLEANUP_ENABLED="true"
CONTEXT_ARCHIVE_ENABLED="true"
CONTEXT_AUTO_ARCHIVE_DAYS="90"  # Auto-archive context files older than X days

# Deployment and testing commands (customize for your workflow)
DEPLOY_COMMAND=""  # e.g., "npm run deploy" or "./deploy.sh"
TEST_COMMAND=""    # e.g., "npm test" or "./run-tests.sh"
BUILD_COMMAND=""   # e.g., "npm run build" or "make build"

# Security scanning
SECURITY_SCAN_ENABLED="true"
SECURITY_PATTERNS="api_key,secret,password,token,credential"  # Comma-separated sensitive patterns

# Notification preferences
ENABLE_NOTIFICATIONS="false"  # Set to "true" to enable desktop notifications
NOTIFICATION_SOUND="true"     # Play sound for important notifications

# Development environment
PREFERRED_EDITOR="code"  # code, vim, nano, etc.
TERMINAL_EMULATOR="default"  # iterm2, gnome-terminal, default, etc.

# Custom project types (optional)
# Define special handling for different project types
# Format: PROJECT_TYPE_<NAME>_PATTERN="pattern"
# PROJECT_TYPE_<NAME>_COMMANDS="command1,command2"
PROJECT_TYPE_NODEJS_PATTERN="package.json"
PROJECT_TYPE_NODEJS_COMMANDS="npm install,npm test,npm run build"

PROJECT_TYPE_PYTHON_PATTERN="requirements.txt,pyproject.toml,setup.py"
PROJECT_TYPE_PYTHON_COMMANDS="pip install -r requirements.txt,python -m pytest,python setup.py build"

PROJECT_TYPE_DOCKER_PATTERN="Dockerfile,docker-compose.yml"
PROJECT_TYPE_DOCKER_COMMANDS="docker-compose build,docker-compose up -d,docker-compose logs"

# Backup and archive settings
BACKUP_ENABLED="false"
BACKUP_PATH="$HOME/.claude-backups"
AUTO_ARCHIVE_COMPLETED_BRANCHES="true"

# Integration settings
SLACK_WEBHOOK_URL=""  # Optional: Slack integration for notifications
JIRA_PROJECT_KEY=""   # Optional: JIRA integration
GITHUB_ORGANIZATION=""  # Optional: GitHub organization for PR creation